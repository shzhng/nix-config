{ pkgs, ... }: {
  # Provision my user account.
  users.users = {
    shuo = {
      home = "/Users/shuo";
      # This is really just for setting $SHELL, rather than `chsh` your user
      # Maybe a fix incoming?: https://github.com/LnL7/nix-darwin/issues/811
      shell = pkgs.fish;
    };
  };

  # Create /etc/zshrc that loads the nix-darwin environment.
  programs.zsh.enable = true;  # default shell on catalina
  programs.fish.enable = true;

  # List packages installed in system profile. To search by name, run:
  # $ nix-env -qaP | grep wget
  environment = {
    systemPackages = with pkgs; [
      vim
      bat
      fd
      fzf
      lsd
      git
    ];

    # Set shells that will be available to users.
    shells = with pkgs; [ zsh fish ];
  };

  homebrew = {
    enable = true;
    # Uninstall brews and cleanup casks files if we remove packages here
    onActivation.cleanup = "zap";

    taps = [
      "1password/tap"
      "babashka/brew"
      "borkdude/brew"
      "clojure-lsp/brew"
      "clojure/tools"
      "cloudflare/cloudflare"
      "d12frosted/emacs-plus"
      "derailed/k9s"
      "hashicorp/tap"
      "homebrew/bundle"
      "homebrew/cask-drivers"
      "homebrew/cask-fonts"
      "homebrew/cask-versions"
      "homebrew/services"
      "jeffreywildman/virt-manager"
      "pluralsh/plural"
      "railwaycat/emacsmacport"
      "twilio/brew"
    ];

    brews = [
      "aom"
      "apr"
      "apr-util"
      "aribb24"
      "at-spi2-core"
      "atk"
      "autoconf"
      "automake"
      "awk"
      "awscli"
      "aztfexport"
      "azure-cli"
      "babashka"
      "bash"
      "bison"
      "boost"
      "bottom"
      "brotli"
      "c-ares"
      "ca-certificates"
      "cairo"
      "cf-terraforming"
      "cffi"
      "chezmoi"
      "chruby"
      "cjson"
      "clj-kondo"
      "cloc"
      "clojure"
      "clojure-lsp-native"
      "coreutils"
      "cryptography"
      "cunit"
      "dav1d"
      "dbus"
      "desktop-file-utils"
      "direnv"
      "docutils"
      "dog"
      "doggo"
      "double-conversion"
      "duckdb"
      "edencommon"
      "elixir"
      "emacs-plus@29"
      "erlang"
      "faac"
      "faad2"
      "fb303"
      "fbthrift"
      "fdk-aac"
      "ffmpeg"
      "fizz"
      "flac"
      "flyctl"
      "fmt"
      "folly"
      "fontconfig"
      "freetype"
      "frei0r"
      "fribidi"
      "gcc"
      "gdbm"
      "gdk-pixbuf"
      "gettext"
      "gflags"
      "ghostscript"
      "giflib"
      "glances"
      "glib"
      "glib-networking"
      "glog"
      "gmp"
      "gnu-sed"
      "gnu-tar"
      "gnutls"
      "go"
      "gobject-introspection"
      "graphene"
      "graphicsmagick"
      "graphite2"
      "grep"
      "gsettings-desktop-schemas"
      "gstreamer"
      "gtk+3"
      "gtk-vnc"
      "gtk4"
      "harfbuzz"
      "hcloud"
      "helm"
      "hicolor-icon-theme"
      "highway"
      "htop"
      "hwloc"
      "icu4c"
      "imagemagick"
      "imath"
      "img2pdf"
      "irssi"
      "isl"
      "jansson"
      "jasper"
      "jbig2dec"
      "jbig2enc"
      "jpeg"
      "jpeg-turbo"
      "jpeg-xl"
      "json-glib"
      "k9s"
      "krb5"
      "kubernetes-cli"
      "lame"
      "leiningen"
      "leptonica"
      "libarchive"
      "libass"
      "libb2"
      "libbluray"
      "libcuefile"
      "libde265"
      "libepoxy"
      "libevent"
      "libffi"
      "libgccjit"
      "libgcrypt"
      "libgit2"
      "libgpg-error"
      "libheif"
      "libidn"
      "libidn2"
      "libimagequant"
      "libiscsi"
      "liblqr"
      "libmicrohttpd"
      "libmpc"
      "libnghttp2"
      "libogg"
      "libomp"
      "libpng"
      "libpsl"
      "libpthread-stubs"
      "librist"
      "librsvg"
      "libsamplerate"
      "libshout"
      "libsndfile"
      "libsodium"
      "libsoup"
      "libsoxr"
      "libssh"
      "libssh2"
      "libtasn1"
      "libtermkey"
      "libtiff"
      "libtool"
      "libunibreak"
      "libunistring"
      "libusb"
      "libusrsctp"
      "libuv"
      "libvidstab"
      "libvirt"
      "libvirt-glib"
      "libvmaf"
      "libvorbis"
      "libvpx"
      "libvterm"
      "libx11"
      "libxau"
      "libxcb"
      "libxdmcp"
      "libxext"
      "libxfixes"
      "libxi"
      "little-cms2"
      "luajit"
      "luv"
      "lz4"
      "lzo"
      "m4"
      "make"
      "mbedtls"
      "meson"
      "mpdecimal"
      "mpfr"
      "mpg123"
      "msgpack"
      "musepack"
      "ncurses"
      "neil"
      "neofetch"
      "neovim"
      "nettle"
      "ninja"
      "node"
      "numpy"
      "ocrmypdf"
      "oniguruma"
      "openblas"
      "opencore-amr"
      "openexr"
      "openjdk"
      "openjpeg"
      "openssl@1.1"
      "openssl@3"
      "opentofu"
      "openvino"
      "opus"
      "p11-kit"
      "packer"
      "pandoc"
      "pango"
      "pcre2"
      "pillow"
      "pipx"
      "pixman"
      "pkg-config"
      "plural"
      "pngquant"
      "postgresql"
      "postgresql@14"
      "pugixml"
      "py3cairo"
      "pybind11"
      "pycparser"
      "pygobject3"
      "python-cryptography"
      "python-lxml"
      "python-packaging"
      "python-pyparsing"
      "python-setuptools"
      "python@3.12"
      "qpdf"
      "rbenv"
      "readline"
      "rav1e"
      "ripgrep"
      "rlwrap"
      "rtmpdump"
      "rtorrent"
      "rubberband"
      "ruby-build"
      "ruby-install"
      "sdl2"
      "shared-mime-info"
      "shellcheck"
      "snappy"
      "speex"
      "spice-gtk"
      "spice-protocol"
      "sqlcmd"
      "sqlite"
      "srt"
      "srtp"
      "subversion"
      "svt-av1"
      "taglib"
      "tbb"
      "tcl-tk"
      "tesseract"
      "tesseract-lang"
      "texinfo"
      "theora"
      "tmux"
      "tree"
      "unbound"
      "unibilium"
      "unixodbc"
      "unpaper"
      "usbredir"
      "utf8proc"
      "virt-viewer"
      "wangle"
      "watchman"
      "webp"
      "wxwidgets"
      "x264"
      "x265"
      "xmlrpc-c"
      "xorgproto"
      "xsv"
      "xvid"
      "xz"
      "yajl"
      "yarn"
      "zeromq"
      "zimg"
      "zlib"
      "zstd"
    ];

    casks = [
      "1password"
      "1password-cli"
      "alfred"
      "azure-data-studio"
      "calibre"
      "cursor"
      "discord"
      "figma"
      "figma-agent"
      "firefox"
      "flipper"
      "font-fira-code"
      "font-hack-nerd-font"
      "font-hubot-sans"
      "font-jetbrains-mono"
      "font-monaspace"
      "font-source-code-pro"
      "google-chrome"
      "google-drive"
      "karabiner-elements"
      "kitty"
      "microsoft-auto-update"
      "microsoft-office"
      "microsoft-teams"
      "mullvadvpn"
      "plex"
      "slack"
      "spotify"
      "tailscale"
      "vlc"
      "visual-studio-code"
      "wechat"
      "wezterm"
      "whatsapp"
      "zoom"
    ];

    masApps = {
    };
  };

  # Auto upgrade nix package and the daemon service.
  services.nix-daemon.enable = true;
  # nix.package = pkgs.nix;

  # Necessary for using flakes on this system.
  nix.settings.experimental-features = "nix-command flakes";

  # Set Git commit hash for darwin-version.
  # system.configurationRevision = self.rev or self.dirtyRev or null;

  # Used for backwards compatibility, please read the changelog before changing.
  # $ darwin-rebuild changelog
  system.stateVersion = 4;

  # The platform the configuration will be used on.
  nixpkgs.hostPlatform = "aarch64-darwin";

  # Enable Touch ID for sudo, instead of entering password.
  security.pam.enableSudoTouchIdAuth = true;
}